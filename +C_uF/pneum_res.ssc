component pneum_res
    nodes
        I = C_uF.C_uF;
    end
    inputs
        f = {0,'Hz'};
        inp = {-1,'1'};
    end
    outputs
        revOut = {-1,'1'};
    end
    annotations
        revOut : Side = right;
        I : Side = top;
        f : Side = top;
        inp : Side = top;
    end
    variables
        p = {0,'Pa'};
        q = {0,'mm^3/s'};
        % q_dot = {0, 'mm^3/s^2'};
        h_liquid = {0,'mm'};
        p_cent = {0,'Pa'};
        f_dot = {0,'Hz/s'};
        p_Euler = {0,'Pa'};
        V_liquid = {0,'mm^3'};
        fill = {0,'1'};
        % p_visc = {0,'Pa'};
        % p_IRRF = {0,'Pa'};
        p_pneum = {0,'Pa'};
    end
    parameters
        G = {0,'1'};
        init_fill = {0,'1'};
        V_total = {0,'mm^3'};
        l = {10,'mm'};
        dist_to_cent = {10,'mm'};
        theta = {pi/2,'1'};
    end
    parameters (Access = private)
        r = {0,'mm'};
        p0 = {1,'atm'};
        Euler_fill = {0.1,'1'};
        EP = {100,'1/s'};
        % fluidic_res_liq = {0,'Pa*s/mm^3'};
        % fluidic_res_air = {0,'Pa*s/mm^3'};
        gamma_lg = {0.07275,'Pa*m'};
        d = {0,'mm'};
        w = {0,'mm'};
        Area = {1,'mm^2'};
        p_vap = {15880.002396752,'Pa'};
    end
    function setup
        across(p,I.p);
        through(q,I.q);
        d = sqrt(V_total/abs(l));
        w = sqrt(V_total/abs(l));
        % fluidic_res_liq = 28.4*I.viscosity*abs(l)/(Area^2);
        % fluidic_res_air = 28.4*I.viscosity_air*abs(l)/(Area^2);
        Area = w*d;
        r = l+dist_to_cent;
        if init_fill >=1
            fill = 1;
            V_liquid = V_total;
        elseif init_fill > 0
            fill = init_fill;
            V_liquid = init_fill*V_total;
        else
            fill = 0;
            V_liquid = 0;
        end
    end
    equations
        % q.der == q_dot;
        % p_IRRF == abs(l)*q_dot/Area*(fill*I.density+(1-fill)*I.density_gas);
        % p_visc == (fill*fluidic_res_liq + (1-fill)*fluidic_res_air)*q;
        fill == V_liquid/V_total;
        f.der == f_dot;
        h_liquid == abs(l)*fill;
        p_cent == 0.5*I.density_gas*(r^2-(r-h_liquid)^2)*(2*pi*f)^2 + 0.5*I.density*((r-h_liquid)^2-dist_to_cent^2)*(2*pi*f)^2
        if V_liquid > 0
            p_pneum == p0*(V_total/(V_total-V_liquid))-p0 ;
            if f_dot > 0
                if fill > Euler_fill
                    p_Euler.der == EP*(-(G-1)*0.5*(I.density*w*2*pi*r)*f_dot-p_Euler);
                else
                    p_Euler.der == EP*(-(G-1)*0.5*(I.density*w*2*pi*r)*f_dot*(fill/Euler_fill)-p_Euler);
                end
            else
                if fill > Euler_fill
                    p_Euler.der == EP*(-(G+1)*0.5*(I.density*w*2*pi*r)*f_dot-p_Euler);
                else
                    p_Euler.der == EP*(-(G+1)*0.5*(I.density*w*2*pi*r)*f_dot*(fill/Euler_fill)-p_Euler);
                end
            end
        else
            p_pneum == p0*(V_total/(V_total-V_liquid))-p0;
            p_Euler.der == -EP*p_Euler;
        end
        
        if (inp>1) && (fill<1) && (q>0)
            % filling
            V_liquid.der == abs(q);
            revOut == -1;
        elseif (inp>1) && (fill>=1) && (q>0)
            % filled
            V_liquid.der == 0;
            revOut == -1;
        elseif (fill>0) && (q<0)
            % defilling
            V_liquid.der == -abs(q);
            revOut == 2;
        else
            % either emptied or initially empty
            V_liquid.der == 0;
            revOut == -1;
        end
        p + p_cent + p_Euler == p_pneum ;
        % p + p_cent + p_Euler == p_IRRF + p_visc + p_pneum ;
        % p == p_pneum - p_cent - p_Euler;
        % p - p_cent - p_Euler == -p_IRRF - p_visc - p_pneum;
        % p + p_cent == p_pneum;

    end
end
